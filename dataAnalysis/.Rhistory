chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
return(results)
}
chance_comparison <- compare_chance_levels()
compare_chance_levels <- function() {
# Define parameters
propTa_nback <- 20/63
propTa_nbackVisual <- 3/10
# Calculate all chance levels
results <- data.frame(
Strategy = c("stratF", "stratJ", "stratR", "stratF", "stratJ", "stratR", "stratF-2", "stratJ-2", "stratR-2"),
Task = c("nback", "nback", "nback", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual"),
Chance_Level = c(
chance_level(propTa_nback, "stratF", "nback"),
chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("For nback task:\n")
nback_results <- results %>% filter(Task == "nback")
print(nback_results %>% select(Strategy, Chance_Level, Interpretation))
cat("\nFor nbackVisual task:\n")
visual_results <- results %>% filter(Task == "nbackVisual")
print(visual_results %>% select(Strategy, Chance_Level, Interpretation))
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", nback_results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", visual_results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", visual_results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
return(results)
}
chance_comparison <- compare_chance_levels()
compare_chance_levels <- function() {
# Define parameters
propTa_nback <- 20/63
propTa_nbackVisual <- 3/10
# Calculate all chance levels
results <- data.frame(
Strategy = c("stratF", "stratJ", "stratR", "stratF", "stratJ", "stratR", "stratF-2", "stratJ-2", "stratR-2"),
Task = c("nback", "nback", "nback", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual"),
Chance_Level = c(
chance_level(propTa_nback, "stratF", "nback"),
chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("For nback task:\n")
nback_results <- results %>% filter(Task == "nback")
print(nback_results %>% select(Strategy, Chance_Level))
cat("\nFor nbackVisual task:\n")
visual_results <- results %>% filter(Task == "nbackVisual")
print(visual_results %>% select(Strategy, Chance_Level))
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", nback_results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", visual_results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", visual_results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
return(results)
}
chance_comparison <- compare_chance_levels()
chance_comparison
chance_comparison
view(chance_comparison)
compare_chance_levels <- function() {
# Define parameters
propTa_nback <- 20/63
propTa_nbackVisual <- 3/10
# Calculate all chance levels
results <- data.frame(
Strategy = c("stratF", "stratJ", "stratR", "stratF", "stratJ", "stratR", "stratF-2", "stratJ-2", "stratR-2"),
Task = c("nback", "nback", "nback", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual"),
Chance_Level = c(
chance_level(propTa_nback, "stratF", "nback"),
chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("For nback task:\n")
nback_results <- results %>% filter(Task == "nback")
print(nback_results %>% select(Strategy, Chance_Level))
cat("\nFor nbackVisual task:\n")
visual_results <- results %>% filter(Task == "nbackVisual")
print(visual_results %>% select(Strategy, Chance_Level))
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", nback_results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", visual_results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", visual_results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
best_strat_nback <- max(nback_results$Chance_Level)
worst_strat_nback <- min(nback_results$Chance_Level)
best_strat_nbackVisual <- max(visual_results$Chance_Level)
best_strat_nbackVisual <- min(visual_results$Chance_Level)
return(results)
}
chance_comparison <- compare_chance_levels()
best_strat_nbackVisual
compare_chance_levels <- function() {
# Define parameters
propTa_nback <- 20/63
propTa_nbackVisual <- 3/10
# Calculate all chance levels
results <- data.frame(
Strategy = c("stratF", "stratJ", "stratR", "stratF", "stratJ", "stratR", "stratF-2", "stratJ-2", "stratR-2"),
Task = c("nback", "nback", "nback", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual"),
Chance_Level = c(
chance_level(propTa_nback, "stratF", "nback"),
chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("For nback task:\n")
nback_results <- results %>% filter(Task == "nback")
print(nback_results %>% select(Strategy, Chance_Level))
cat("\nFor nbackVisual task:\n")
visual_results <- results %>% filter(Task == "nbackVisual")
print(visual_results %>% select(Strategy, Chance_Level))
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", nback_results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", visual_results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", visual_results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
best_strat_nback <- max(nback_results$Chance_Level)
worst_strat_nback <- min(nback_results$Chance_Level)
best_strat_nbackVisual <- max(visual_results$Chance_Level)
best_strat_nbackVisual <- min(visual_results$Chance_Level)
return(results)
}
chance_comparison <- compare_chance_levels()
best_strat_nbackVisual
compare_chance_levels <- function() {
# Define parameters
propTa_nback <- 20/63
propTa_nbackVisual <- 3/10
# Calculate all chance levels
results <- data.frame(
Strategy = c("stratF", "stratJ", "stratR", "stratF", "stratJ", "stratR", "stratF-2", "stratJ-2", "stratR-2"),
Task = c("nback", "nback", "nback", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual", "nbackVisual"),
Chance_Level = c(
chance_level(propTa_nback, "stratF", "nback"),
chance_level(propTa_nback, "stratJ", "nback"),
chance_level(propTa_nback, "stratR", "nback"),
chance_level(propTa_nbackVisual, "stratF", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratF-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratJ-2", "nbackVisual"),
chance_level(propTa_nbackVisual, "stratR-2", "nbackVisual")),
stringsAsFactors = FALSE
)
results <- results %>%
arrange(Task, Chance_Level)
cat("For nback task:\n")
nback_results <- results %>% filter(Task == "nback")
print(nback_results %>% select(Strategy, Chance_Level))
cat("\nFor nbackVisual task:\n")
visual_results <- results %>% filter(Task == "nbackVisual")
print(visual_results %>% select(Strategy, Chance_Level))
cat("• Best strategy for nback:", results$Strategy[which.max(nback_results$Chance_Level)],
"with", round(max(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nback:", nback_results$Strategy[which.min(nback_results$Chance_Level)],
"with", round(min(nback_results$Chance_Level), 3), "accuracy\n")
cat("• Best strategy for nbackVisual:", visual_results$Strategy[which.max(visual_results$Chance_Level)],
"with", round(max(visual_results$Chance_Level), 3), "accuracy\n")
cat("• Worst strategy for nbackVisual:", visual_results$Strategy[which.min(visual_results$Chance_Level)],
"with", round(min(visual_results$Chance_Level), 3), "accuracy\n")
return(results)
}
chance_comparison <- compare_chance_levels()
# Extract the values you need from the returned data
nback_results <- chance_comparison %>% filter(Task == "nback")
visual_results <- chance_comparison %>% filter(Task == "nbackVisual")
best_strat_nback <- max(nback_results$Chance_Level)
worst_strat_nback <- min(nback_results$Chance_Level)
best_strat_nbackVisual <- max(visual_results$Chance_Level)
worst_strat_nbackVisual <- min(visual_results$Chance_Level)
worst_strat_nbackVisual
accuracy_best_strat_nback <- max(nback_results$Chance_Level)
accuracy_worst_strat_nback <- min(nback_results$Chance_Level)
accuracy_best_strat_nbackVisual <- max(visual_results$Chance_Level)
accuracy_worst_strat_nbackVisual <- min(visual_results$Chance_Level)
accuracy_worst_strat_nbackVisual
accuracy_worst_strat_nback
#install.packages("jsonlite")
library(ggpubr)
library(rstatix)
# Prepare data for plotting
plot_data <- final_data %>%
select(subject, STAT_accuracy_nbackVisual_hard, STAT_accuracy_nbackVisual_easy) %>%
pivot_longer(
cols = c(STAT_accuracy_nbackVisual_hard, STAT_accuracy_nbackVisual_easy),
names_to = "condition",
values_to = "accuracy"
) %>%
mutate(
condition = case_when(
condition == "STAT_accuracy_nbackVisual_hard" ~ "Hard",
condition == "STAT_accuracy_nbackVisual_easy" ~ "Easy"
),
condition = factor(condition, levels = c("Easy", "Hard"))
)
view(plot_data)
# Calculate descriptive statistics
desc_stats <- plot_data %>%
group_by(condition) %>%
summarise(
mean = mean(accuracy, na.rm = TRUE),
sd = sd(accuracy, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
print(desc_stats)
t_test_hard_easy
t_test_hard_easy <- t.test(final_data$STAT_accuracy_nbackVisual_hard,
final_data$STAT_accuracy_nbackVisual_easy)
t_test_hard_easy
# Statistical test
stat_test <- plot_data %>%
t_test(accuracy ~ condition, paired = TRUE) %>%
add_significance()
print(stat_test)
# Get chance level for nbackVisual (stratF-2 is the best strategy)
chance_level_visual <- accuracy_best_strat_nbackVisual
# Create the plot
p <- ggbarplot(
plot_data,
x = "condition",
y = "accuracy",
add = c("mean_se", "jitter"),  # Add standard error bars and data points
color = "condition",
fill = "condition",
palette = c("#00AFBB", "#E7B800"),  # Easy = blue, Hard = yellow
position = position_dodge(0.8),
alpha = 0.7,
size = 0.8,
width = 0.6
) +
# Add horizontal line for chance level
geom_hline(
yintercept = chance_level_visual,
linetype = "dashed",
color = "red",
size = 1
) +
# Add chance level annotation
annotate(
"text",
x = 1.5,
y = chance_level_visual + 0.02,
label = paste0("Chance level = ", round(chance_level_visual, 3)),
color = "red",
size = 3.5
) +
# Add statistical comparison
stat_pvalue_manual(
stat_test,
label = "p = {p}",
tip.length = 0.01,
y.position = max(plot_data$accuracy, na.rm = TRUE) + 0.05
) +
# Customize appearance
labs(
title = "Accuracy in nbackVisual Task: Hard vs Easy Blocks",
subtitle = paste0("n = ", desc_stats$n[1], " participants"),
x = "Block Difficulty",
y = "Accuracy",
caption = "Error bars represent standard error of the mean\nRed dashed line shows theoretical chance level"
) +
theme_pubr() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, 0.1),
labels = scales::percent_format(accuracy = 1)
)
# Create the plot
p <- ggbarplot(
plot_data,
x = "condition",
y = "accuracy",
add = c("mean_se", "jitter"),  # Add standard error bars and data points
color = "condition",
fill = "condition",
palette = c("#00AFBB", "#E7B800"),  # Easy = blue, Hard = yellow
position = position_dodge(0.8),
alpha = 0.7,
linewidth = 0.8,
width = 0.6
) +
# Add horizontal line for chance level
geom_hline(
yintercept = chance_level_visual,
linetype = "dashed",
color = "red",
linewidth = 1
) +
# Add chance level annotation
annotate(
"text",
x = 1.5,
y = chance_level_visual + 0.02,
label = paste0("Chance level = ", round(chance_level_visual, 3)),
color = "red",
linewidth = 3.5
) +
# Add statistical comparison
stat_pvalue_manual(
stat_test,
label = "p = {p}",
tip.length = 0.01,
y.position = max(plot_data$accuracy, na.rm = TRUE) + 0.05
) +
# Customize appearance
labs(
title = "Accuracy in nbackVisual Task: Hard vs Easy Blocks",
subtitle = paste0("n = ", desc_stats$n[1], " participants"),
x = "Block Difficulty",
y = "Accuracy",
caption = "Error bars represent standard error of the mean\nRed dashed line shows theoretical chance level"
) +
theme_pubr() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, 0.1),
labels = scales::percent_format(accuracy = 1)
)
# Create the plot
p <- ggbarplot(
plot_data,
x = "condition",
y = "accuracy",
add = c("mean_se", "jitter"),  # Add standard error bars and data points
color = "condition",
fill = "condition",
palette = c("#00AFBB", "#E7B800"),  # Easy = blue, Hard = yellow
position = position_dodge(0.8),
alpha = 0.7,
size = 0.8,
width = 0.6
) +
# Add horizontal line for chance level
geom_hline(
yintercept = chance_level_visual,
linetype = "dashed",
color = "red",
linewidth = 1
) +
# Add chance level annotation
annotate(
"text",
x = 1.5,
y = chance_level_visual + 0.02,
label = paste0("Chance level = ", round(chance_level_visual, 3)),
color = "red",
size = 3.5
) +
# Add statistical comparison
stat_pvalue_manual(
stat_test,
label = "p = {p}",
tip.length = 0.01,
y.position = max(plot_data$accuracy, na.rm = TRUE) + 0.05
) +
# Customize appearance
labs(
title = "Accuracy in nbackVisual Task: Hard vs Easy Blocks",
subtitle = paste0("n = ", desc_stats$n[1], " participants"),
x = "Block Difficulty",
y = "Accuracy",
caption = "Error bars represent standard error of the mean\nRed dashed line shows theoretical chance level"
) +
theme_pubr() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, 0.1),
labels = scales::percent_format(accuracy = 1)
)
print(p)
# Create the plot
p <- ggbarplot(
plot_data,
x = "condition",
y = "accuracy",
add = c("mean_se", "dotplot"),  # Add standard error bars and data points
color = "condition",
fill = "condition",
palette = c("#00AFBB", "#E7B800"),  # Easy = blue, Hard = yellow
position = position_dodge(0.8),
alpha = 0.7,
size = 0.8,
width = 0.6
) +
# Add horizontal line for chance level
geom_hline(
yintercept = chance_level_visual,
linetype = "dashed",
color = "red",
linewidth = 1
) +
# Add chance level annotation
annotate(
"text",
x = 1.5,
y = chance_level_visual + 0.02,
label = paste0("Chance level = ", round(chance_level_visual, 3)),
color = "red",
size = 3.5
) +
# Add statistical comparison
stat_pvalue_manual(
stat_test,
label = "p = {p}",
tip.length = 0.01,
y.position = max(plot_data$accuracy, na.rm = TRUE) + 0.05
) +
# Customize appearance
labs(
title = "Accuracy in nbackVisual Task: Hard vs Easy Blocks",
subtitle = paste0("n = ", desc_stats$n[1], " participants"),
x = "Block Difficulty",
y = "Accuracy",
caption = "Error bars represent standard error of the mean\nRed dashed line shows theoretical chance level"
) +
theme_pubr() +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
) +
scale_y_continuous(
limits = c(0, 1),
breaks = seq(0, 1, 0.1),
labels = scales::percent_format(accuracy = 1)
)
print(p)
